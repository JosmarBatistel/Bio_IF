import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:whatsapp/model/Conversa.dart';
import 'package:whatsapp/model/Mensagem.dart';
import 'package:whatsapp/model/Usuario.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'dart:io';

class Mensagens extends StatefulWidget {
  //const Mensagens({ Key? key }) : super(key: key);

  Usuario contato;

  Mensagens(this.contato);

  @override
  _MensagensState createState() => _MensagensState();
}


class _MensagensState extends State<Mensagens> {

  bool _subindoImagem = false;
  TextEditingController _controllerMensagem = TextEditingController();
  String? _idUsuarioLogado;
  String? _idUsuarioDestinatario;
  FirebaseFirestore db = FirebaseFirestore.instance;
  final _controller = StreamController<QuerySnapshot>.broadcast();
  ScrollController _scrollController = ScrollController();


  _enviarMensagem() {
    String textoMensagem = _controllerMensagem.text;

    if (textoMensagem.isNotEmpty) {
      Mensagem mensagem = Mensagem();
      mensagem.idUsuario = _idUsuarioLogado!;
      mensagem.mensagem = textoMensagem;
      mensagem.urlImagem = "";
      mensagem.tipo = "texto";
      mensagem.data = Timestamp.now().toString();


      _salvarMensagem(_idUsuarioLogado!, _idUsuarioDestinatario!, mensagem);
      
      _salvarMensagem(_idUsuarioDestinatario!, _idUsuarioLogado!, mensagem);

      _salvarConversa(mensagem);
    }
  }

  _salvarConversa(Mensagem msg) {
    Conversa cRemetente = new Conversa();
    cRemetente.idRemetente = _idUsuarioLogado!;
    cRemetente.idDestinatario = _idUsuarioDestinatario!;
    cRemetente.mensagem = msg.mensagem;
    cRemetente.nome = widget.contato.nome;
    cRemetente.caminhoFoto = widget.contato.urlImagem;
    cRemetente.tipoMensagem = msg.tipo;
    cRemetente.salvar();
    
    Conversa cDestinatario = new Conversa();
    cDestinatario.idRemetente = _idUsuarioDestinatario!;
    cDestinatario.idDestinatario = _idUsuarioLogado!;
    cDestinatario.mensagem = msg.mensagem;
    cDestinatario.nome = widget.contato.nome;
    cDestinatario.caminhoFoto = widget.contato.urlImagem;
    cDestinatario.tipoMensagem = msg.tipo;
    cDestinatario.salvar();
  }

  _enviarFoto() async {
    final ImagePicker _picker = ImagePicker();
    XFile? imagemSelecionada;
    
    imagemSelecionada = await _picker.pickImage(source: ImageSource.camera);
    _subindoImagem = true;
    String nomeImagem = DateTime.now().microsecondsSinceEpoch.toString();

    FirebaseStorage storage = FirebaseStorage.instance;
    Reference pastaRaiz = storage.ref();
    Reference arquivo = pastaRaiz
      .child("mensagens")
      .child(_idUsuarioLogado!)
      .child(nomeImagem   ".jpg");

    UploadTask task = arquivo.putFile(File(imagemSelecionada!.path));

    task.snapshotEvents.listen((TaskSnapshot event) {
      if (event.state == TaskState.running) {
        setState(() {
          _subindoImagem = true;
        });
      } else if(event.state == TaskState.success){
        _recuperarUrlImagem(event);
        setState(() {
          _subindoImagem = false;
        });
      }
    });
  }

  Future _recuperarUrlImagem(TaskSnapshot snapshot) async {
    String url = await snapshot.ref.getDownloadURL();

    Mensagem mensagem = Mensagem();
      mensagem.idUsuario = _idUsuarioLogado!;
      mensagem.mensagem = "";
      mensagem.urlImagem = url;
      mensagem.tipo = "imagem";
      mensagem.data = Timestamp.now().toString();

    _salvarMensagem(_idUsuarioLogado!, _idUsuarioDestinatario!, mensagem);
      
    _salvarMensagem(_idUsuarioDestinatario!, _idUsuarioLogado!, mensagem);
  }

  _salvarMensagem(String idRemetente, String idDestinatario, Mensagem msg) async {
    
    await db.collection("mensagens")
      .doc(idRemetente)
      .collection(idDestinatario)
      .add(msg.toMap());

    _controllerMensagem.clear();
  }
  

  _recuperaDadosUsuario() async {
    FirebaseAuth auth = FirebaseAuth.instance;
    User? usuarioLogado = await auth.currentUser;
    _idUsuarioLogado = await usuarioLogado!.uid;

    _idUsuarioDestinatario = await widget.contato.idUsuario;

    _adicionarListenerMensagens();

  }

  Stream<QuerySnapshot>? _adicionarListenerMensagens(){
    final stream = db.collection("mensagens")
        .doc(_idUsuarioLogado)
        .collection(_idUsuarioDestinatario!)
        .orderBy("data", descending: false)
        .snapshots();

      stream.listen((dados) {
        _controller.add(dados);

        Timer(Duration(seconds: 1), () {
          _scrollController.jumpTo(_scrollController.position.maxScrollExtent);
        });
      });
  }

  @override
  void initState() {
    super.initState();
    
    _recuperaDadosUsuario();
  }


  @override
  Widget build(BuildContext context) {

    var caixaMensagem = Container(
      padding: EdgeInsets.all(8),
      child: Row(
        children: [
          Expanded(
            child: Padding(
              padding: EdgeInsets.only(right: 8),
              child: TextField(
                controller: _controllerMensagem,
                autofocus: true,
                keyboardType: TextInputType.text,
                style: TextStyle(fontSize: 20),
                decoration: InputDecoration(
                  contentPadding: EdgeInsets.fromLTRB(32, 8, 32, 8),
                  hintText: "Digite uma mensagem...",
                  filled: true,
                  fillColor: Colors.white,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(32)
                  ),
                  prefixIcon: _subindoImagem
                  ? CircularProgressIndicator()
                  :  IconButton(
                      icon: Icon(Icons.camera_alt),
                      onPressed: () => _enviarFoto(),
                    )
                  
                ),
              ),
            ),
          ),
          Platform.isIOS 
            ? CupertinoButton(
                child: Text("Enviar"),
                onPressed: _enviarMensagem,
              )
            : FloatingActionButton(
                backgroundColor: Color(0xff075e54),
                child: Icon(Icons.send, color: Colors.white),
                mini: true,
                onPressed: _enviarMensagem
              )
        ],
      ),
    );

    var stream = StreamBuilder(
      stream: _controller.stream,
      builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
        switch (snapshot.connectionState) {
          case ConnectionState.none:
          case ConnectionState.waiting:
            return Center(
                child: Column(
                  children: [
                    Text("Carregando mensagens"),
                    CircularProgressIndicator()
                  ],
                ),
              );
          case ConnectionState.active:
          case ConnectionState.done:
            
            QuerySnapshot<Object?>? querySnapshot = snapshot.data;

            if (snapshot.hasError) {
              return Text("Erro ao carregar dados!");
            } else {
              return Expanded(
                child: ListView.builder(
                  controller: _scrollController,
                  itemCount: querySnapshot!.docs.length,
                  itemBuilder: (context, indice) {

                    List<DocumentSnapshot> mensagens = querySnapshot.docs.toList();
                    DocumentSnapshot item = mensagens[indice];

                    double larguraContainer = MediaQuery.of(context).size.width * 0.8;

                    Alignment alinhamento = Alignment.centerRight;
                    Color cor = Color(0xffd2ffa5);

                    if (_idUsuarioLogado != item["idUsuario"]) {
                      alinhamento = Alignment.centerLeft;
                      cor = Colors.white;
                    }

                    return Align(
                      alignment: alinhamento,
                      child: Padding(
                        padding: EdgeInsets.all(6),
                        child: Container(
                          width: larguraContainer,
                          padding: EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            color: cor,
                            borderRadius: BorderRadius.all(Radius.circular(8))
                          ),
                          child: item["tipo"] == "texto"
                          ? Text(
                              item["mensagem"],
                              style: TextStyle(
                                fontSize: 16
                              )
                            )
                          : Image.network(item["urlImagem"])
                        ),
                      ),
                    );
                  }
                ),
              );
            }
        }
      }
    );

    /*
    var stream = FutureBuilder(
      future: _recuperaDadosUsuario(),
      builder: (context, fSnapshot) {
        switch (fSnapshot.connectionState) {
          case ConnectionState.none:
          case ConnectionState.waiting:
            return Center(
              child: Column(
                children: [
                  Text("Carregando mensagens"),
                  CircularProgressIndicator()
                ],
              ),
            );
          case ConnectionState.active:
          case ConnectionState.done:
            return StreamBuilder(
              stream: db.collection("mensagens")
                .doc(_idUsuarioLogado)
                .collection(_idUsuarioDestinatario!).snapshots(),
              builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
                switch (snapshot.connectionState) {
                  case ConnectionState.none:
                  case ConnectionState.waiting:
                    return Center(
                        child: Column(
                          children: [
                            Text("Carregando mensagens"),
                            CircularProgressIndicator()
                          ],
                        ),
                      );
                  case ConnectionState.active:
                  case ConnectionState.done:
                    
                    QuerySnapshot<Object?>? querySnapshot = snapshot.data;

                    if (snapshot.hasError) {
                      return Text("Erro ao carregar dados!");
                    } else {
                      return Expanded(
                        child: ListView.builder(
                          itemCount: querySnapshot!.docs.length,
                          itemBuilder: (context, indice) {

                            List<DocumentSnapshot> mensagens = querySnapshot.docs.toList();
                            DocumentSnapshot item = mensagens[indice];

                            double larguraContainer = MediaQuery.of(context).size.width * 0.8;

                            Alignment alinhamento = Alignment.centerRight;
                            Color cor = Color(0xffd2ffa5);

                            if (_idUsuarioLogado != item["idUsuario"]) {
                              alinhamento = Alignment.centerLeft;
                              cor = Colors.white;
                            }

                            return Align(
                              alignment: alinhamento,
                              child: Padding(
                                padding: EdgeInsets.all(6),
                                child: Container(
                                  width: larguraContainer,
                                  padding: EdgeInsets.all(16),
                                  decoration: BoxDecoration(
                                    color: cor,
                                    borderRadius: BorderRadius.all(Radius.circular(8))
                                  ),
                                  child: item["tipo"] == "texto"
                                  ? Text(
                                      item["mensagem"],
                                      style: TextStyle(
                                        fontSize: 16
                                      )
                                    )
                                  : Image.network(item["urlImagem"])
                                ),
                              ),
                            );
                          }
                        ),
                      );
                    }
                }
              }
            );
        }
      }
    );
    */
    return Scaffold(
      appBar: AppBar(
        title: Row(
          children: [
            CircleAvatar(
              maxRadius: 20,
              backgroundColor: Colors.grey,
              backgroundImage: widget.contato.urlImagem != ""
              ? NetworkImage(widget.contato.urlImagem)
              : null
            ),
            Padding(
              padding: EdgeInsets.only(left: 8),
              child: Text(widget.contato.nome),
            )
          ],
        )
      ),
      body: Container(
        width: MediaQuery.of(context).size.width,
        decoration: BoxDecoration(
          image: DecorationImage(
            image: AssetImage("imagens/bg.png"),
            fit: BoxFit.cover
          )
        ),
        child: SafeArea(
          child: Container(
            padding: EdgeInsets.all(8),
            child: Column(
              children: [
                stream,
                caixaMensagem
              ],
            ),
          )
        ),
      ),
    );
  }
}